// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContainerStatus {
  CREATED
  RUNNING
  PAUSED
  RESTARTING
  REMOVING
  EXITED
  DEAD
}

enum Role {
  USER
  ADMIN
  MODERATOR
  GUEST
}

enum AccountType {
  FREE
  MEDIUM
  PREMIUM
}

model User {
  id           Int          @id @default(autoincrement())
  uuid         String       @unique @default(uuid())
  email        String       @unique
  password     String
  name         String?
  refreshToken String?
  accessToken  String?
  role         Role         @default(USER)
  accountType  AccountType  @default(FREE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  connections  Connection[]
  Log          Log[]
  profile      Profile?
  composeDeployments ComposeDeployment[]
}

model Connection {
  id         Int         @id @default(autoincrement())
  uuid       String      @unique @default(uuid())
  host       String // Docker host bilgisi
  port       Int // Docker port bilgisi
  tlsConfig  Json? // TLS yapılandırması (isteğe bağlı)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  ownerId    Int // Kullanıcı ID'si
  owner      User        @relation(fields: [ownerId], references: [id])
  containers Container[]
  composeDeployments ComposeDeployment[]
}

model Container {
  id           Int             @id @default(autoincrement())
  uuid         String          @unique @default(uuid())
  dockerId     String
  name         String
  image        String
  status       ContainerStatus @default(CREATED)
  connectionId Int
  connection   Connection      @relation(fields: [connectionId], references: [id])
  createdAt    DateTime        @default(now())
  composeDeploymentId Int?
  composeDeployment   ComposeDeployment? @relation(fields: [composeDeploymentId], references: [id])
}

model Log {
  id        Int      @id @default(autoincrement())
  action    String
  timestamp DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  serverId  Int
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@index([token])
  @@map("blacklistedTokens")
}

model Profile {
  id                   Int       @id @default(autoincrement())
  uuid                 String    @unique @default(uuid())
  company              String?
  phone                String?
  address              String?
  avatarUrl            String?
  bio                  String?   @db.Text
  jobTitle             String?
  department           String?
  website              String?
  github               String?
  dockerHub            String? // Docker Hub kullanıcı adı
  defaultRegistryUrl   String? // Varsayılan container registry URL'i
  defaultImagePrefix   String? // Varsayılan image prefix'i
  preferredNetwork     String? // Tercih edilen network modu
  defaultRestartPolicy String? // Varsayılan restart policy
  totalContainers      Int       @default(0) // Toplam oluşturulan container sayısı
  activeContainers     Int       @default(0) // Aktif container sayısı
  totalConnections     Int       @default(0) // Toplam bağlantı sayısı
  totalImages          Int       @default(0) // Toplam image sayısı
  diskUsage            Float     @default(0) // Toplam disk kullanımı (GB)
  emailNotifications   Boolean   @default(true) // Email bildirimleri
  containerAlerts      Boolean   @default(true) // Container durum bildirimleri
  resourceAlerts       Boolean   @default(true) // Kaynak kullanım bildirimleri
  twoFactorEnabled     Boolean   @default(false) // 2FA aktif mi?
  apiKeyEnabled        Boolean   @default(false) // API Key kullanımı aktif mi?
  lastSecurityScan     DateTime? // Son güvenlik taraması tarihi
  theme                String?   @default("light") // UI teması (light/dark)
  language             String?   @default("en") // Tercih edilen dil
  timeZone             String?   @default("UTC") // Zaman dilimi
  lastLogin            DateTime?
  lastActivity         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  userId               Int       @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ComposeDeployment {
  id                Int         @id @default(autoincrement())
  uuid              String      @unique @default(uuid())
  name              String
  description       String?
  composeContent    String      @db.Text
  environmentVars   Json?
  status           String      @default("PENDING") // PENDING, RUNNING, FAILED, STOPPED
  connectionId     Int
  connection       Connection  @relation(fields: [connectionId], references: [id])
  containers       Container[] // Containers created by this deployment
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  createdBy        Int
  user             User        @relation(fields: [createdBy], references: [id])

  @@index([connectionId])
  @@index([createdBy])
}
