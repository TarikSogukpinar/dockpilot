// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContainerStatus {
  CREATED
  RUNNING
  PAUSED
  RESTARTING
  REMOVING
  EXITED
  DEAD
}

enum Role {
  USER
  ADMIN
  MODERATOR
  GUEST
}

enum AccountType {
  FREE
  MEDIUM
  PREMIUM
}

enum NetworkDriver {
  BRIDGE
  HOST
  OVERLAY
  MACVLAN
  IPVLAN
  NONE
}

enum NetworkScope {
  LOCAL
  SWARM
  GLOBAL
}

enum ResourceMetricType {
  CPU
  MEMORY
  DISK_READ
  DISK_WRITE
  NETWORK_IN
  NETWORK_OUT
  PIDS
}

enum AlertSeverity {
  INFO
  WARNING
  CRITICAL
}

enum VolumeDriver {
  LOCAL
  NFS
  CIFS
  TMPFS
  BIND
}

enum VolumeScope {
  LOCAL
  GLOBAL
}

enum ContainerHealthStatus {
  HEALTHY
  UNHEALTHY
  STARTING
  NONE
}

enum ContainerRestartPolicy {
  NO
  ALWAYS
  ON_FAILURE
  UNLESS_STOPPED
}

enum ContainerAction {
  START
  STOP
  RESTART
  PAUSE
  UNPAUSE
  KILL
  RENAME
  UPDATE
}

// Backup related enums
enum BackupType {
  FULL
  INCREMENTAL
  SNAPSHOT
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  VERIFIED
  CORRUPTED
}

enum BackupStorageType {
  LOCAL
  S3
  AZURE_BLOB
  GOOGLE_CLOUD
  FTP
  SFTP
}

enum RestoreStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  VALIDATED
}

model User {
  id                 Int                 @id @default(autoincrement())
  uuid               String              @unique @default(uuid())
  email              String              @unique
  password           String
  name               String?
  refreshToken       String?
  accessToken        String?
  role               Role                @default(USER)
  accountType        AccountType         @default(FREE)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  connections        Connection[]
  Log                Log[]
  profile            Profile?
  composeDeployments ComposeDeployment[]
}

model Connection {
  id                 Int                 @id @default(autoincrement())
  uuid               String              @unique @default(uuid())
  name               String
  host               String
  port               Int
  tlsConfig          Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             Int
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  containers         Container[]
  composeDeployments ComposeDeployment[]
  images             Image[]
  networks           Network[]
  volumes            Volume[]
  backups            Backup[]            // Relation to backups
  restores           Restore[]           // Relation to restores
  backupSchedules    BackupSchedule[]    // Relation to backup schedules

  @@index([userId])
  @@map("connections")
}

model Container {
  id                  Int                    @id @default(autoincrement())
  uuid                String                 @unique @default(uuid())
  dockerId            String
  name                String
  image               String
  status              ContainerStatus        @default(CREATED)
  healthStatus        ContainerHealthStatus  @default(NONE)
  restartPolicy       ContainerRestartPolicy @default(NO)
  restartCount        Int                    @default(0)
  exitCode            Int?
  command             String?
  entrypoint         String?
  workingDir         String?
  environment        Json?                  // Environment variables
  ports              Json?                  // Port mappings
  volumes            Volume[]               // Mounted volumes
  networks           Network[]              // Connected networks
  labels             Json?                  // Container labels
  healthCheck        ContainerHealthCheck?
  logs               ContainerLog[]
  events             ContainerEvent[]
  metrics            ResourceMetric[]
  limits             ResourceLimit[]
  alerts             ResourceAlert[]
  optimizations      ResourceOptimization[]
  connectionId       Int
  connection         Connection             @relation(fields: [connectionId], references: [id])
  createdAt          DateTime               @default(now())
  startedAt          DateTime?
  finishedAt         DateTime?
  composeDeploymentId Int?
  composeDeployment   ComposeDeployment?    @relation(fields: [composeDeploymentId], references: [id])

  @@index([connectionId])
  @@index([status])
  @@map("containers")
}

model ContainerHealthCheck {
  id              Int       @id @default(autoincrement())
  uuid            String    @unique @default(uuid())
  test            String[]  // Health check command
  interval        Int       @default(30)    // Seconds between checks
  timeout         Int       @default(30)    // Seconds to wait for response
  retries         Int       @default(3)     // Number of retries
  startPeriod     Int       @default(0)     // Seconds to wait on startup
  containerId     Int       @unique         // One-to-one relation
  container       Container @relation(fields: [containerId], references: [id], onDelete: Cascade)

  @@map("container_health_checks")
}

model ContainerLog {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  stream      String    // stdout or stderr
  message     String    @db.Text
  timestamp   DateTime  @default(now())
  containerId Int
  container   Container @relation(fields: [containerId], references: [id], onDelete: Cascade)

  @@index([containerId, timestamp])
  @@map("container_logs")
}

model ContainerEvent {
  id          Int            @id @default(autoincrement())
  uuid        String         @unique @default(uuid())
  action      ContainerAction
  status      String
  message     String?
  timestamp   DateTime       @default(now())
  containerId Int
  container   Container      @relation(fields: [containerId], references: [id], onDelete: Cascade)

  @@index([containerId, timestamp])
  @@map("container_events")
}

model Log {
  id        Int      @id @default(autoincrement())
  action    String
  timestamp DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  serverId  Int
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
  @@index([token])
  @@map("blacklistedTokens")
}

model Profile {
  id                   Int       @id @default(autoincrement())
  uuid                 String    @unique @default(uuid())
  company              String?
  phone                String?
  address              String?
  avatarUrl            String?
  bio                  String?   @db.Text
  jobTitle             String?
  department           String?
  website              String?
  github               String?
  dockerHub            String? // Docker Hub kullanıcı adı
  defaultRegistryUrl   String? // Varsayılan container registry URL'i
  defaultImagePrefix   String? // Varsayılan image prefix'i
  preferredNetwork     String? // Tercih edilen network modu
  defaultRestartPolicy String? // Varsayılan restart policy
  totalContainers      Int       @default(0) // Toplam oluşturulan container sayısı
  activeContainers     Int       @default(0) // Aktif container sayısı
  totalConnections     Int       @default(0) // Toplam bağlantı sayısı
  totalImages          Int       @default(0) // Toplam image sayısı
  diskUsage            Float     @default(0) // Toplam disk kullanımı (GB)
  emailNotifications   Boolean   @default(true) // Email bildirimleri
  containerAlerts      Boolean   @default(true) // Container durum bildirimleri
  resourceAlerts       Boolean   @default(true) // Kaynak kullanım bildirimleri
  twoFactorEnabled     Boolean   @default(false) // 2FA aktif mi?
  apiKeyEnabled        Boolean   @default(false) // API Key kullanımı aktif mi?
  lastSecurityScan     DateTime? // Son güvenlik taraması tarihi
  theme                String?   @default("light") // UI teması (light/dark)
  language             String?   @default("en") // Tercih edilen dil
  timeZone             String?   @default("UTC") // Zaman dilimi
  lastLogin            DateTime?
  lastActivity         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  userId               Int       @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ComposeDeployment {
  id              Int         @id @default(autoincrement())
  uuid            String      @unique @default(uuid())
  name            String
  description     String?
  composeContent  String      @db.Text
  environmentVars Json?
  status          String      @default("PENDING") // PENDING, RUNNING, FAILED, STOPPED
  connectionId    Int
  connection      Connection  @relation(fields: [connectionId], references: [id])
  containers      Container[] // Containers created by this deployment
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdBy       Int
  user            User        @relation(fields: [createdBy], references: [id])

  @@index([connectionId])
  @@index([createdBy])
}

model Image {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @default(uuid())
  name       String
  tag        String    @default("latest")
  imageId    String // Docker image ID
  registry   String?
  size       Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  pullCount  Int       @default(0)
  lastPulled DateTime?
  digest     String?
  platform   String?
  labels     Json? // Store image labels

  // Relations
  connectionId Int
  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  // Indexes
  @@unique([connectionId, imageId])
  @@index([connectionId])
  @@index([name, tag])
  @@map("images")
}

model Network {
  id           Int           @id @default(autoincrement())
  uuid         String        @unique @default(uuid())
  name         String
  driver       NetworkDriver @default(BRIDGE)
  scope        NetworkScope  @default(LOCAL)
  internal     Boolean       @default(false)
  attachable   Boolean       @default(true)
  ingress      Boolean       @default(false)
  ipam         Json? // IP Address Management configuration
  options      Json? // Driver specific options
  labels       Json? // Network labels
  enableIPv6   Boolean       @default(false)
  subnet       String? // Subnet in CIDR format
  gateway      String? // Gateway IP address
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  connectionId Int
  connection   Connection    @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  containers   Container[] // Containers connected to this network

  @@index([connectionId])
  @@map("networks")
}

model ResourceMetric {
  id          Int                @id @default(autoincrement())
  uuid        String             @unique @default(uuid())
  type        ResourceMetricType
  value       Float
  unit        String // MB, GB, %, etc.
  timestamp   DateTime           @default(now())
  containerId Int
  container   Container          @relation(fields: [containerId], references: [id])

  @@index([containerId, timestamp])
  @@index([type, timestamp])
  @@map("resource_metrics")
}

model ResourceLimit {
  id          Int                @id @default(autoincrement())
  uuid        String             @unique @default(uuid())
  type        ResourceMetricType
  maxValue    Float
  minValue    Float?
  softLimit   Float? // Warning threshold
  hardLimit   Float? // Critical threshold
  enabled     Boolean            @default(true)
  containerId Int
  container   Container          @relation(fields: [containerId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@unique([containerId, type])
  @@map("resource_limits")
}

model ResourceAlert {
  id          Int                @id @default(autoincrement())
  uuid        String             @unique @default(uuid())
  type        ResourceMetricType
  message     String
  value       Float
  threshold   Float
  severity    AlertSeverity
  timestamp   DateTime           @default(now())
  resolved    Boolean            @default(false)
  resolvedAt  DateTime?
  containerId Int
  container   Container          @relation(fields: [containerId], references: [id])

  @@index([containerId, timestamp])
  @@index([severity, resolved])
  @@map("resource_alerts")
}

model ResourceOptimization {
  id             Int                @id @default(autoincrement())
  uuid           String             @unique @default(uuid())
  containerId    Int
  container      Container          @relation(fields: [containerId], references: [id])
  suggestion     String
  impact         String // HIGH, MEDIUM, LOW
  currentValue   Float?
  suggestedValue Float?
  metric         ResourceMetricType
  implemented    Boolean            @default(false)
  implementedAt  DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@map("resource_optimizations")
}

model Volume {
  id            Int           @id @default(autoincrement())
  uuid          String        @unique @default(uuid())
  name          String
  driver        VolumeDriver  @default(LOCAL)
  scope         VolumeScope   @default(LOCAL)
  mountpoint    String?
  options       Json?         // Driver specific options
  labels        Json?         // Volume labels
  size          Int?         // Size in bytes
  usedSize      Int?         // Used size in bytes
  status        String?      // Volume status
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  connectionId  Int
  connection    Connection   @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  containers    Container[]  // Containers using this volume
  backups       VolumeBackup[]
  snapshots     VolumeSnapshot[]

  @@index([connectionId])
  @@map("volumes")
}

model VolumeBackup {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  name        String
  size        Int       // Backup size in bytes
  status      String    // PENDING, COMPLETED, FAILED
  location    String    // Backup storage location
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  volumeId    Int
  volume      Volume    @relation(fields: [volumeId], references: [id], onDelete: Cascade)

  @@index([volumeId])
  @@map("volume_backups")
}

model VolumeSnapshot {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  name        String
  size        Int       // Snapshot size in bytes
  status      String    // PENDING, COMPLETED, FAILED
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  volumeId    Int
  volume      Volume    @relation(fields: [volumeId], references: [id], onDelete: Cascade)

  @@index([volumeId])
  @@map("volume_snapshots")
}

// Backup and Restore models
model Backup {
  id              Int               @id @default(autoincrement())
  uuid            String            @unique @default(uuid())
  name            String
  description     String?
  type            BackupType
  status          BackupStatus      @default(PENDING)
  storageType     BackupStorageType
  storageLocation String
  size            Int              // Size in bytes
  checksum        String?          // For integrity verification
  compression     Boolean          @default(true)
  encrypted       Boolean          @default(false)
  encryptionKey   String?         // Encrypted storage of backup key
  retentionDays   Int             @default(30)
  
  // Backup contents
  containerIds    String[]        // List of container IDs included
  volumeIds       String[]        // List of volume IDs included
  networkIds      String[]        // List of network IDs included
  
  // Metadata
  metadata        Json?           // Additional backup metadata
  tags            String[]        // For organization and filtering
  
  // Timestamps
  startedAt       DateTime        @default(now())
  completedAt     DateTime?
  lastVerifiedAt  DateTime?
  
  // Relations
  connectionId    Int
  connection      Connection      @relation(fields: [connectionId], references: [id])
  restores        Restore[]      // Restore operations from this backup
  
  // Indexes
  @@index([connectionId])
  @@index([type, status])
  @@index([startedAt])
  @@map("backups")
}

model Restore {
  id              Int            @id @default(autoincrement())
  uuid            String         @unique @default(uuid())
  name            String
  description     String?
  status          RestoreStatus  @default(PENDING)
  
  // Restore configuration
  targetEnv       String?        // Target environment for restore
  overwriteExisting Boolean     @default(false)
  selectedItems   Json?         // Specific items to restore
  
  // Results
  restoredItems   Json?         // Successfully restored items
  errorLog        String?       // Detailed error information
  
  // Timestamps
  startedAt       DateTime      @default(now())
  completedAt     DateTime?
  
  // Relations
  backupId        Int
  backup          Backup        @relation(fields: [backupId], references: [id])
  connectionId    Int
  connection      Connection    @relation(fields: [connectionId], references: [id])
  
  // Indexes
  @@index([backupId])
  @@index([connectionId])
  @@index([status])
  @@map("restores")
}

model BackupSchedule {
  id              Int           @id @default(autoincrement())
  uuid            String        @unique @default(uuid())
  name            String
  description     String?
  enabled         Boolean       @default(true)
  
  // Schedule configuration
  cronExpression  String        // When to run the backup
  backupType      BackupType
  retention       Int          @default(30) // Days to keep backups
  
  // Backup settings
  compression     Boolean       @default(true)
  encryption      Boolean       @default(false)
  storageType     BackupStorageType
  storageConfig   Json?        // Storage-specific configuration
  
  // What to backup
  includeContainers Boolean    @default(true)
  includeVolumes    Boolean    @default(true)
  includeNetworks   Boolean    @default(true)
  specificItems     Json?      // Specific items to backup
  
  // Relations
  connectionId    Int
  connection      Connection   @relation(fields: [connectionId], references: [id])
  
  // Timestamps
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  
  // Indexes
  @@index([connectionId])
  @@index([enabled])
  @@map("backup_schedules")
}
